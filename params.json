{
  "name": "bookshelf-mask",
  "tagline": "Mask Bookshelf.js models with json-mask",
  "body": "## Overview\r\n\r\nThis [Bookshelf.js](https://github.com/tgriesser/bookshelf) plugin enables you to define masks on your models and serialize to JSON based on its fields using the [json-mask](https://github.com/nemtsov/json-mask) API.\r\n\r\n## Status\r\n\r\n[![npm version][npm-image]][npm-url] [![build status][travis-image]][travis-url] [![coverage status][coveralls-image]][coveralls-url]\r\n\r\n## Installation\r\n\r\nInstall the package via **npm**:\r\n\r\n```sh\r\n$ npm install --save bookshelf-mask\r\n```\r\n\r\n## Usage\r\n\r\nRequire and register the **bookshelf-mask** plugin:\r\n\r\n```js\r\nvar bookshelf = require('bookshelf')(knex);\r\nvar mask = require('bookshelf-mask');\r\n\r\nbookshelf.plugin(mask);\r\n```\r\n\r\nDefine masks on your models with `masks` prototype property:\r\n\r\n```js\r\nvar Author = bookshelf.Model.extend({\r\n  masks: {\r\n    custom: 'id,name'\r\n  },\r\n  posts: {\r\n    return this.hasMany(Post);\r\n  },\r\n  tableName: 'Author'\r\n});\r\n```\r\n\r\nUse the `mask` method to serialize the registered masks or pass the fields directly:\r\n\r\n```js\r\nAuthor\r\n  .forge({ name: 'foo' })\r\n  .fetch({ withRelated: 'posts' })\r\n  .then(function(model) {\r\n    console.log(model.mask('custom'));\r\n    // => { id: 1, name: 'foo' }\r\n    console.log(model.mask('name,posts(title,body)'));\r\n    // => { name: 'foo', posts: [{ title: 'biz', body: 'baz' }, { title: 'qux', body: 'qix' }]}\r\n  });\r\n```\r\n\r\nThe `mask` method can be applied to collections and the same options accepted in `toJSON` can also be provided.\r\n\r\n## Contributing\r\n\r\nContributions are welcome and greatly appreciated, so feel free to fork this repository and submit pull requests.\r\n\r\n### Setting up\r\n\r\n- Fork and clone the **bookshelf-mask** repository.\r\n- Duplicate *test/knexfile.js.dist* and and update it to your needs.\r\n- Make sure all the tests pass:\r\n\r\n```sh\r\n$ npm test\r\n```\r\n\r\n### Linting\r\n\r\n**bookshelf-mask** enforces linting using [ESLint](http://eslint.org/) with the [Seegno-flavored ESLint config](https://github.com/seegno/eslint-config-seegno). We recommend you to install an **eslint** plugin in your editor of choice, although you can run the linter anytime with:\r\n\r\n```sh\r\n$ eslint src test\r\n```\r\n\r\n### Pull Request\r\n\r\nPlease follow these advices to simplify the pull request workflow:\r\n\r\n- If you add or enhance functionality, an update of *README.md* usage section should be part of the PR.\r\n- If your PR fixes a bug you should include tests that at least fail before your code changes and pass after.\r\n- Keep your branch rebased and fix all conflicts before submitting.\r\n- Make sure **Travis** build status is ok.\r\n\r\n## License\r\n\r\n[MIT](https://opensource.org/licenses/MIT)\r\n\r\n[coveralls-image]: https://img.shields.io/coveralls/seegno/bookshelf-mask/master.svg?style=flat-square\r\n[coveralls-url]: https://coveralls.io/github/seegno/bookshelf-mask?branch=master\r\n[npm-image]: https://img.shields.io/npm/v/bookshelf-mask.svg?style=flat-square\r\n[npm-url]: https://npmjs.org/package/bookshelf-mask\r\n[travis-image]: https://img.shields.io/travis/seegno/bookshelf-mask/master.svg?style=flat-square\r\n[travis-url]: https://travis-ci.org/seegno/bookshelf-mask\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}